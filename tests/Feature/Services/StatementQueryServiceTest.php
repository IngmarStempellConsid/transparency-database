<?php

namespace Tests\Feature\Services;


use App\Services\StatementQueryService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;


class StatementQueryServiceTest extends TestCase
{

    use RefreshDatabase;

    protected StatementQueryService $statement_query_service;

    public function setUp(): void
    {
        $this->statement_query_service = app(StatementQueryService::class);
        $this->assertNotNull($this->statement_query_service);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function it_can_do_a_basic_query()
    {
        $this->seed(); // 200 statements
        $total = $this->statement_query_service->query([])->count();
        $this->assertEquals(200, $total);
    }

    /**
     * @test
     */
    public function it_filters_on_automated_detection()
    {
        $this->seed(); // 200 statements
        $automated_count = $this->statement_query_service->query(['automated_detection' => ['Yes']])->count();
        $manual_count = $this->statement_query_service->query(['automated_detection' => ['No']])->count();

        $total = $automated_count + $manual_count;

        $this->assertEquals(200, $total);
    }

    /**
     * @test
     */
    public function it_filters_on_automated_takedown()
    {
        $this->seed(); // 200 statements
        $automated_count = $this->statement_query_service->query(['automated_takedown' => ['Yes']])->count();
        $manual_count = $this->statement_query_service->query(['automated_takedown' => ['No']])->count();

        $total = $automated_count + $manual_count;

        $this->assertEquals(200, $total);
    }
}
