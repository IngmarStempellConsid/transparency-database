<?php

namespace Tests\Feature\Services;

use App\Models\DayArchive;
use App\Models\Statement;
use App\Services\DayArchiveService;
use App\Services\DriveInService;
use App\Services\EuropeanCountriesService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

class DayArchiveServiceTest extends TestCase
{

    use RefreshDatabase;

    protected DayArchiveService $day_archive_service;

    public function setUp(): void
    {
        $this->day_archive_service = app(DayArchiveService::class);
        $this->assertNotNull($this->day_archive_service);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function it_retrieves_master_list()
    {
        DayArchive::create([
            'date' => '2023-10-02',
            'total' => 1,
            'completed_at' => Carbon::now()
        ]);
        DayArchive::create([
            'date' => '2023-10-01',
            'total' => 2,
            'completed_at' => Carbon::now()
        ]);


        $list = $this->day_archive_service->masterList()->get();
        $this->assertCount(2, $list);

        // First one needs the 2
        $first = $list->first();
        $this->assertEquals('2023-10-02', $first->date);

        // Needs to be in the right order.
        $last = $list->last();
        $this->assertEquals('2023-10-01', $last->date);

    }

    /**
     * @test
     */
    public function master_list_must_be_completed_day_archive()
    {
        DayArchive::create([
            'date' => '2023-10-02',
            'total' => 1
        ]);
        DayArchive::create([
            'date' => '2023-10-01',
            'total' => 2
        ]);


        $list = $this->day_archive_service->masterList()->get();
        $this->assertCount(0, $list);
    }

    /**
     * @test
     */
    public function it_retrieves_an_archive_by_date()
    {
        DayArchive::create([
            'date' => '2023-10-02',
            'total' => 1
        ]);

        $dayarchive = $this->day_archive_service->getDayArchiveByDate(Carbon::createFromFormat('Y-m-d', '2023-10-02'));
        $this->assertNotNull($dayarchive);
    }

    /**
     * @test
     */
    public function it_creates_a_day_archive()
    {
        $day_archive = $this->day_archive_service->createDayArchive(Carbon::createFromFormat('Y-m-d', '2023-10-02'));
        $this->assertNotNull($day_archive);
        $this->assertEquals(0, $day_archive->total);
    }

    /**
     * @test
     */
    public function it_does_not_allow_overwriting()
    {
        $day_archive = $this->day_archive_service->createDayArchive(Carbon::createFromFormat('Y-m-d', '2023-10-02'));
        $this->assertNotNull($day_archive);

        $this->expectExceptionMessage('A day archive for the date: 2023-10-02 already exists.');
        $day_archive = $this->day_archive_service->createDayArchive(Carbon::createFromFormat('Y-m-d', '2023-10-02'));
    }


    /**
     * @test
     */
    public function it_ensures_the_date_is_in_the_past()
    {
        $this->expectExceptionMessage('When creating a day export you must supply a date in the past.');
        $day_archive = $this->day_archive_service->createDayArchive(Carbon::createFromFormat('Y-m-d', '2070-10-02'));
    }
}
