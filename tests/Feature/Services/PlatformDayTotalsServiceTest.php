<?php

namespace Tests\Feature\Services;

use App\Models\Platform;
use App\Models\PlatformDayTotal;
use App\Models\Statement;
use App\Services\PlatformDayTotalsService;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PlatformDayTotalsServiceTest extends TestCase
{

    use RefreshDatabase;

    protected PlatformDayTotalsService $platform_day_totals_service;

    public function setUp(): void
    {
        $this->platform_day_totals_service = app(PlatformDayTotalsService::class);
        $this->assertNotNull($this->platform_day_totals_service);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @return void
     * @test
     */
    public function a_basic_test()
    {
        $this->setUpFullySeededDatabase();
        /** @var Platform $platform */
        $platform = Platform::all()->random()->first();
        $this->assertNotNull($platform);

        // clear all statements for this platform.
        $platform->statements()->delete();

        $date = Carbon::yesterday();

        // There should be no day total and thus a false.
        $dayTotal = $this->platform_day_totals_service->getDayTotal($platform, $date);
        $this->assertFalse($dayTotal);

        $total_statements = Statement::count();

        // Create 5 statements for this platform yesterday.
        Statement::factory()->count(5)->create([
            'created_at' => $date,
            'platform_id' => $platform->id,
        ]);

        $this->assertEquals($total_statements + 5, Statement::count());

        // The day total should still not be there.
        $dayTotal = $this->platform_day_totals_service->getDayTotal($platform, $date);
        $this->assertFalse($dayTotal);

        // Get the total and if it doesn't exist queue compile it.
        $dayTotal = $this->platform_day_totals_service->compileDayTotal($platform, $date, '*', '*');
        $this->assertEquals(5, $dayTotal);

        // Get it again and by now it should have been made.
        $dayTotal = $this->platform_day_totals_service->getDayTotal($platform, $date);

        // 5 statements should have been made yesterday.
        $this->assertEquals(5, $dayTotal);
    }

    /**
     * @return void
     * @test
     */
    public function filtering_is_working()
    {
        $this->setUpFullySeededDatabase();
        $platform = Platform::all()->random()->first();
        $this->assertNotNull($platform);

        // clear all statements for this platform.
        $platform->statements()->delete();

        $date = Carbon::yesterday();

        // It's not compiled or existing thus false... not an int.
        $dayTotal = $this->platform_day_totals_service->getDayTotal($platform, $date);
        $this->assertFalse($dayTotal);

        $total_statements = Statement::count();

        // Make 7 with yes
        Statement::factory()->count(7)->create([
            'created_at' => $date,
            'platform_id' => $platform->id,
            'automated_detection' => Statement::AUTOMATED_DETECTION_YES
        ]);

        // 6 with no
        Statement::factory()->count(6)->create([
            'created_at' => $date,
            'platform_id' => $platform->id,
            'automated_detection' => Statement::AUTOMATED_DETECTION_NO
        ]);

        // there should be 13 more than before.
        $this->assertEquals($total_statements + 13, Statement::count());

        // Compile the day totals.
        $this->platform_day_totals_service->compileDayTotal($platform, $date, 'automated_detection', Statement::AUTOMATED_DETECTION_YES);

        // Compiling twice doesn't break.
        $this->platform_day_totals_service->compileDayTotal($platform, $date, 'automated_detection', Statement::AUTOMATED_DETECTION_YES);
        $this->platform_day_totals_service->compileDayTotal($platform, $date, 'automated_detection', Statement::AUTOMATED_DETECTION_NO);

        $dayTotalYes = $this->platform_day_totals_service->getDayTotal($platform, $date, 'automated_detection', Statement::AUTOMATED_DETECTION_YES);
        $dayTotalNo = $this->platform_day_totals_service->getDayTotal($platform, $date, 'automated_detection', Statement::AUTOMATED_DETECTION_NO);

        $this->assertEquals(7, $dayTotalYes);
        $this->assertEquals(6, $dayTotalNo);
    }

    /**
     * @return void
     * @test
     */
    public function cascade_delete_is_doing_what_it_should()
    {
        $this->setUpFullySeededDatabase();
        $platform = Platform::all()->random()->first();
        $this->assertNotNull($platform);

        // clear all statements for this platform.
        $platform->statements()->delete();

        $date = Carbon::yesterday();

        // It's not compiled or existing thus false... not an int.
        $dayTotal = $this->platform_day_totals_service->getDayTotal($platform, $date);
        $this->assertFalse($dayTotal);

        $total_statements = Statement::count();

        // Make 7 with yes
        Statement::factory()->count(7)->create([
            'created_at' => $date,
            'platform_id' => $platform->id,
            'automated_detection' => Statement::AUTOMATED_DETECTION_YES
        ]);

        // 6 with no
        Statement::factory()->count(6)->create([
            'created_at' => $date,
            'platform_id' => $platform->id,
            'automated_detection' => Statement::AUTOMATED_DETECTION_NO
        ]);

        // there should be 13 more than before.
        $this->assertEquals($total_statements + 13, Statement::count());

        // Compile the day totals.
        $this->platform_day_totals_service->compileDayTotal($platform, $date, 'automated_detection', Statement::AUTOMATED_DETECTION_YES);
        $this->platform_day_totals_service->compileDayTotal($platform, $date, 'automated_detection', Statement::AUTOMATED_DETECTION_NO);

        // 2 day totals
        $this->assertEquals(2, PlatformDayTotal::count());

        // Delete the platform...
        $platform->forceDelete();

        // No day totals
        $this->assertEquals(0, PlatformDayTotal::count());

    }
}
